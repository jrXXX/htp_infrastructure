/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Akros.Htp.Exchange.Client.OpenAPIDateConverter;

namespace Akros.Htp.Exchange.Model
{
    /// <summary>
    /// SearchRequest
    /// </summary>
    [DataContract(Name = "SearchRequest")]
    public partial class SearchRequest : IEquatable<SearchRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public CurrencyEnum? Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequest" /> class.
        /// </summary>
        /// <param name="destinationCountry">destinationCountry.</param>
        /// <param name="destinationPostalCode">destinationPostalCode.</param>
        /// <param name="destinationCity">destinationCity.</param>
        /// <param name="hotelName">hotelName.</param>
        /// <param name="priceFrom">priceFrom.</param>
        /// <param name="priceTo">priceTo.</param>
        /// <param name="currency">currency.</param>
        /// <param name="dateFrom">dateFrom.</param>
        /// <param name="dateTo">dateTo.</param>
        /// <param name="numberOfGuests">numberOfGuests.</param>
        /// <param name="facilityList">facilityList.</param>
        public SearchRequest(string destinationCountry = default(string), string destinationPostalCode = default(string), string destinationCity = default(string), string hotelName = default(string), int priceFrom = default(int), int priceTo = default(int), CurrencyEnum? currency = default(CurrencyEnum?), DateTime dateFrom = default(DateTime), DateTime dateTo = default(DateTime), int numberOfGuests = default(int), List<Facility> facilityList = default(List<Facility>))
        {
            this.DestinationCountry = destinationCountry;
            this.DestinationPostalCode = destinationPostalCode;
            this.DestinationCity = destinationCity;
            this.HotelName = hotelName;
            this.PriceFrom = priceFrom;
            this.PriceTo = priceTo;
            this.Currency = currency;
            this.DateFrom = dateFrom;
            this.DateTo = dateTo;
            this.NumberOfGuests = numberOfGuests;
            this.FacilityList = facilityList;
        }

        /// <summary>
        /// Gets or Sets DestinationCountry
        /// </summary>
        [DataMember(Name = "destinationCountry", EmitDefaultValue = false)]
        public string DestinationCountry { get; set; }

        /// <summary>
        /// Gets or Sets DestinationPostalCode
        /// </summary>
        [DataMember(Name = "destinationPostalCode", EmitDefaultValue = false)]
        public string DestinationPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets DestinationCity
        /// </summary>
        [DataMember(Name = "destinationCity", EmitDefaultValue = false)]
        public string DestinationCity { get; set; }

        /// <summary>
        /// Gets or Sets HotelName
        /// </summary>
        [DataMember(Name = "hotelName", EmitDefaultValue = false)]
        public string HotelName { get; set; }

        /// <summary>
        /// Gets or Sets PriceFrom
        /// </summary>
        [DataMember(Name = "priceFrom", EmitDefaultValue = false)]
        public int PriceFrom { get; set; }

        /// <summary>
        /// Gets or Sets PriceTo
        /// </summary>
        [DataMember(Name = "priceTo", EmitDefaultValue = false)]
        public int PriceTo { get; set; }

        /// <summary>
        /// Gets or Sets DateFrom
        /// </summary>
        [DataMember(Name = "dateFrom", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateFrom { get; set; }

        /// <summary>
        /// Gets or Sets DateTo
        /// </summary>
        [DataMember(Name = "dateTo", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateTo { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfGuests
        /// </summary>
        [DataMember(Name = "numberOfGuests", EmitDefaultValue = false)]
        public int NumberOfGuests { get; set; }

        /// <summary>
        /// Gets or Sets FacilityList
        /// </summary>
        [DataMember(Name = "facilityList", EmitDefaultValue = false)]
        public List<Facility> FacilityList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchRequest {\n");
            sb.Append("  DestinationCountry: ").Append(DestinationCountry).Append("\n");
            sb.Append("  DestinationPostalCode: ").Append(DestinationPostalCode).Append("\n");
            sb.Append("  DestinationCity: ").Append(DestinationCity).Append("\n");
            sb.Append("  HotelName: ").Append(HotelName).Append("\n");
            sb.Append("  PriceFrom: ").Append(PriceFrom).Append("\n");
            sb.Append("  PriceTo: ").Append(PriceTo).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  NumberOfGuests: ").Append(NumberOfGuests).Append("\n");
            sb.Append("  FacilityList: ").Append(FacilityList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchRequest);
        }

        /// <summary>
        /// Returns true if SearchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DestinationCountry == input.DestinationCountry ||
                    (this.DestinationCountry != null &&
                    this.DestinationCountry.Equals(input.DestinationCountry))
                ) && 
                (
                    this.DestinationPostalCode == input.DestinationPostalCode ||
                    (this.DestinationPostalCode != null &&
                    this.DestinationPostalCode.Equals(input.DestinationPostalCode))
                ) && 
                (
                    this.DestinationCity == input.DestinationCity ||
                    (this.DestinationCity != null &&
                    this.DestinationCity.Equals(input.DestinationCity))
                ) && 
                (
                    this.HotelName == input.HotelName ||
                    (this.HotelName != null &&
                    this.HotelName.Equals(input.HotelName))
                ) && 
                (
                    this.PriceFrom == input.PriceFrom ||
                    this.PriceFrom.Equals(input.PriceFrom)
                ) && 
                (
                    this.PriceTo == input.PriceTo ||
                    this.PriceTo.Equals(input.PriceTo)
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.DateFrom == input.DateFrom ||
                    (this.DateFrom != null &&
                    this.DateFrom.Equals(input.DateFrom))
                ) && 
                (
                    this.DateTo == input.DateTo ||
                    (this.DateTo != null &&
                    this.DateTo.Equals(input.DateTo))
                ) && 
                (
                    this.NumberOfGuests == input.NumberOfGuests ||
                    this.NumberOfGuests.Equals(input.NumberOfGuests)
                ) && 
                (
                    this.FacilityList == input.FacilityList ||
                    this.FacilityList != null &&
                    input.FacilityList != null &&
                    this.FacilityList.SequenceEqual(input.FacilityList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DestinationCountry != null)
                    hashCode = hashCode * 59 + this.DestinationCountry.GetHashCode();
                if (this.DestinationPostalCode != null)
                    hashCode = hashCode * 59 + this.DestinationPostalCode.GetHashCode();
                if (this.DestinationCity != null)
                    hashCode = hashCode * 59 + this.DestinationCity.GetHashCode();
                if (this.HotelName != null)
                    hashCode = hashCode * 59 + this.HotelName.GetHashCode();
                hashCode = hashCode * 59 + this.PriceFrom.GetHashCode();
                hashCode = hashCode * 59 + this.PriceTo.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.DateFrom != null)
                    hashCode = hashCode * 59 + this.DateFrom.GetHashCode();
                if (this.DateTo != null)
                    hashCode = hashCode * 59 + this.DateTo.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfGuests.GetHashCode();
                if (this.FacilityList != null)
                    hashCode = hashCode * 59 + this.FacilityList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
