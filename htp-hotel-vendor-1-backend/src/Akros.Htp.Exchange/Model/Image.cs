/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Akros.Htp.Exchange.Client.OpenAPIDateConverter;

namespace Akros.Htp.Exchange.Model
{
    /// <summary>
    /// Image
    /// </summary>
    [DataContract(Name = "Image")]
    public partial class Image : IEquatable<Image>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Image" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="title">title.</param>
        /// <param name="alt">alt.</param>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="image">image.</param>
        /// <param name="thumbImage">thumbImage.</param>
        public Image(long id = default(long), string title = default(string), string alt = default(string), int width = default(int), int height = default(int), string image = default(string), string thumbImage = default(string))
        {
            this.Id = id;
            this.Title = title;
            this.Alt = alt;
            this.Width = width;
            this.Height = height;
            this._Image = image;
            this.ThumbImage = thumbImage;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Alt
        /// </summary>
        [DataMember(Name = "alt", EmitDefaultValue = false)]
        public string Alt { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets _Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public string _Image { get; set; }

        /// <summary>
        /// Gets or Sets ThumbImage
        /// </summary>
        [DataMember(Name = "thumbImage", EmitDefaultValue = false)]
        public string ThumbImage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Image {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Alt: ").Append(Alt).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  _Image: ").Append(_Image).Append("\n");
            sb.Append("  ThumbImage: ").Append(ThumbImage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Image);
        }

        /// <summary>
        /// Returns true if Image instances are equal
        /// </summary>
        /// <param name="input">Instance of Image to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Image input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Alt == input.Alt ||
                    (this.Alt != null &&
                    this.Alt.Equals(input.Alt))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this._Image == input._Image ||
                    (this._Image != null &&
                    this._Image.Equals(input._Image))
                ) && 
                (
                    this.ThumbImage == input.ThumbImage ||
                    (this.ThumbImage != null &&
                    this.ThumbImage.Equals(input.ThumbImage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Alt != null)
                    hashCode = hashCode * 59 + this.Alt.GetHashCode();
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this._Image != null)
                    hashCode = hashCode * 59 + this._Image.GetHashCode();
                if (this.ThumbImage != null)
                    hashCode = hashCode * 59 + this.ThumbImage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
