/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Akros.Htp.Exchange.Client.OpenAPIDateConverter;

namespace Akros.Htp.Exchange.Model
{
    /// <summary>
    /// BookingResponse
    /// </summary>
    [DataContract(Name = "BookingResponse")]
    public partial class BookingResponse : IEquatable<BookingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookingResponse" /> class.
        /// </summary>
        /// <param name="roomPaid">roomPaid.</param>
        /// <param name="dateFrom">dateFrom.</param>
        /// <param name="dateTo">dateTo.</param>
        /// <param name="responseMessage">responseMessage.</param>
        /// <param name="responseStatus">responseStatus.</param>
        /// <param name="room">room.</param>
        public BookingResponse(bool roomPaid = default(bool), DateTime dateFrom = default(DateTime), DateTime dateTo = default(DateTime), string responseMessage = default(string), int responseStatus = default(int), Room room = default(Room))
        {
            this.RoomPaid = roomPaid;
            this.DateFrom = dateFrom;
            this.DateTo = dateTo;
            this.ResponseMessage = responseMessage;
            this.ResponseStatus = responseStatus;
            this.Room = room;
        }

        /// <summary>
        /// Gets or Sets RoomPaid
        /// </summary>
        [DataMember(Name = "roomPaid", EmitDefaultValue = false)]
        public bool RoomPaid { get; set; }

        /// <summary>
        /// Gets or Sets DateFrom
        /// </summary>
        [DataMember(Name = "dateFrom", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateFrom { get; set; }

        /// <summary>
        /// Gets or Sets DateTo
        /// </summary>
        [DataMember(Name = "dateTo", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DateTo { get; set; }

        /// <summary>
        /// Gets or Sets ResponseMessage
        /// </summary>
        [DataMember(Name = "responseMessage", EmitDefaultValue = false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// Gets or Sets ResponseStatus
        /// </summary>
        [DataMember(Name = "responseStatus", EmitDefaultValue = false)]
        public int ResponseStatus { get; set; }

        /// <summary>
        /// Gets or Sets Room
        /// </summary>
        [DataMember(Name = "room", EmitDefaultValue = false)]
        public Room Room { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BookingResponse {\n");
            sb.Append("  RoomPaid: ").Append(RoomPaid).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("  ResponseStatus: ").Append(ResponseStatus).Append("\n");
            sb.Append("  Room: ").Append(Room).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookingResponse);
        }

        /// <summary>
        /// Returns true if BookingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BookingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BookingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RoomPaid == input.RoomPaid ||
                    this.RoomPaid.Equals(input.RoomPaid)
                ) && 
                (
                    this.DateFrom == input.DateFrom ||
                    (this.DateFrom != null &&
                    this.DateFrom.Equals(input.DateFrom))
                ) && 
                (
                    this.DateTo == input.DateTo ||
                    (this.DateTo != null &&
                    this.DateTo.Equals(input.DateTo))
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                ) && 
                (
                    this.ResponseStatus == input.ResponseStatus ||
                    this.ResponseStatus.Equals(input.ResponseStatus)
                ) && 
                (
                    this.Room == input.Room ||
                    (this.Room != null &&
                    this.Room.Equals(input.Room))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.RoomPaid.GetHashCode();
                if (this.DateFrom != null)
                    hashCode = hashCode * 59 + this.DateFrom.GetHashCode();
                if (this.DateTo != null)
                    hashCode = hashCode * 59 + this.DateTo.GetHashCode();
                if (this.ResponseMessage != null)
                    hashCode = hashCode * 59 + this.ResponseMessage.GetHashCode();
                hashCode = hashCode * 59 + this.ResponseStatus.GetHashCode();
                if (this.Room != null)
                    hashCode = hashCode * 59 + this.Room.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
